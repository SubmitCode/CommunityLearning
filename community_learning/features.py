# AUTOGENERATED! DO NOT EDIT! File to edit: 03_features.ipynb (unless otherwise specified).

__all__ = ['load_data', 'target_cols', 'feature_cols', 'calculate_targets', 'remove_rows_without_product',
           'calculate_target_as_one_column', 'get_last_month_test_set', 'get_train_set', 'calculate_main']

# Cell
import pandas as pd
import numpy as np
from fastscript import *

# Cell
def load_data(path='data/interim/02_train.csv'):
    """load data"""
    return pd.read_csv(path)

# Cell
target_cols = ['ind_ahor_fin_ult1','ind_aval_fin_ult1','ind_cco_fin_ult1',
               'ind_cder_fin_ult1','ind_cno_fin_ult1','ind_ctju_fin_ult1',
               'ind_ctma_fin_ult1','ind_ctop_fin_ult1','ind_ctpp_fin_ult1',
               'ind_deco_fin_ult1','ind_deme_fin_ult1','ind_dela_fin_ult1',
               'ind_ecue_fin_ult1','ind_fond_fin_ult1','ind_hip_fin_ult1',
               'ind_plan_fin_ult1','ind_pres_fin_ult1','ind_reca_fin_ult1',
               'ind_tjcr_fin_ult1','ind_valo_fin_ult1','ind_viv_fin_ult1',
               'ind_nomina_ult1','ind_nom_pens_ult1','ind_recibo_ult1']

target_cols.remove('ind_ahor_fin_ult1') #wenig häufig
target_cols.remove('ind_aval_fin_ult1') #wenig häufig


feature_cols = ['ind_empleado', 'sexo', 'age', 'renta', 'ind_nuevo',
                'indrel', 'indrel_1mes', 'tiprel_1mes', 'indresi', 'indext',
                'conyuemp', 'indfall', 'tipodom', 'ind_actividad_cliente',
                'segmento', 'antiguedad', 'pais_residencia', 'canal_entrada']

# Cell
def calculate_targets(df:pd.DataFrame,
                      feature_cols:list=feature_cols,
                      target_products:list=target_cols,
                      remove_wrong_shift_entries=True,
                      shift_periods=1):
    """add the shifted product values and calculate target variables"""

    df.sort_values(by = ['id', 'month_int'], inplace=True) #sort by id then by month_int
    df['id_shift'] = df['id'].shift(shift_periods).fillna(0).astype(np.int32)

    idx_to_remove = ((df['id'] - df['id_shift']) != 0) #store index unwanted entries

    #add shifted target colums
    for col in target_products:
        name = col + '_s'
        df[name] = df[col].shift(shift_periods).fillna(0).astype(np.int8)
        df.loc[idx_to_remove, name] = 0 #set to 0 so that the difference works out

    # set 1 only for added products not for existing products
    for col in target_products:
        df[col] = (df[col] - df[col + '_s']).astype(np.int8)
        df[col] = (df[col] > 0).astype(np.int8)

    if remove_wrong_shift_entries:
        df = df[idx_to_remove == False] #remove illogical results

    return df


# Cell
def remove_rows_without_product(df:pd.DataFrame, target_products:list=target_cols):
    """removes all rows from a train set without new products"""
    return df[df[target_products].sum(axis=1) != 0] #entfernen von Zeilen ohne neue Produkte

# Cell
def calculate_target_as_one_column(df:pd.DataFrame, feature_cols:list, target_cols:list):
    """create a row for every new porduct and give the product name as target column, this is done for the train set"""
    x = df[target_cols]
    x = x[x==1].stack().reset_index().drop(0,1)
    df = pd.merge(df, x, left_on=df.index, right_on='level_0')
    df.rename(columns={'level_1': "y"}, inplace=True)

    keep_cols = feature_cols.copy()
    keep_cols += [ col for col in df if col[-2:] == '_s'] # keep also shifted columns
    keep_cols.append('month_int')
    keep_cols.append('id') #keep id
    keep_cols.append('y') #keep target var

    return df[keep_cols]

# Cell
def get_last_month_test_set(df:pd.DataFrame, feature_cols=feature_cols, target_cols=target_cols):
    """calculates test set for all new products in the last month"""
    df = df.loc[df.month_int >= 16,].copy()
    df = calculate_targets(df, feature_cols, target_cols, shift_periods=1, remove_wrong_shift_entries=False)
    df = df.loc[df.month_int == 17]
    return df

# Cell
def get_train_set(df:pd.DataFrame, feature_cols=feature_cols, target_cols=target_cols, product_shift=1):
    """retunrs the trainset. Take care that you don't include the test data to this function"""
    train = calculate_targets(df.loc[df.month_int <= 16,].copy(),
                              feature_cols, target_cols,
                              shift_periods=product_shift)
    train = remove_rows_without_product(train, target_cols)
    train = calculate_target_as_one_column(train, feature_cols, target_cols)
    return train

# Cell
@call_parse
def calculate_main(source:Param("source csv file", str)='data/interim/02_train.csv',
                   dest_train:Param("destination train csv file", str)='data/interim/03_train.csv',
                   dest_test:Param("destination test csv file", str)='data/interim/03_test.csv',
                   shift_periods:Param("how many periods to shift target_vars", str) = 1):
    """calculate target variables and delayed product features"""

    data = load_data(source)
    train = get_train_set(data, product_shift=shift_periods)
    test = get_last_month_test_set(data)

    train.to_csv(dest_train, index=False)
    test.to_csv(dest_test, index=False)
    return (train, test)
